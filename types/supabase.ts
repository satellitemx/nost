/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/chat": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat.id"];
          created_at?: parameters["rowFilter.chat.created_at"];
          content?: parameters["rowFilter.chat.content"];
          by_guest?: parameters["rowFilter.chat.by_guest"];
          room_id?: parameters["rowFilter.chat.room_id"];
          by_user?: parameters["rowFilter.chat.by_user"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["chat"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chat */
          chat?: definitions["chat"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat.id"];
          created_at?: parameters["rowFilter.chat.created_at"];
          content?: parameters["rowFilter.chat.content"];
          by_guest?: parameters["rowFilter.chat.by_guest"];
          room_id?: parameters["rowFilter.chat.room_id"];
          by_user?: parameters["rowFilter.chat.by_user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.chat.id"];
          created_at?: parameters["rowFilter.chat.created_at"];
          content?: parameters["rowFilter.chat.content"];
          by_guest?: parameters["rowFilter.chat.by_guest"];
          room_id?: parameters["rowFilter.chat.room_id"];
          by_user?: parameters["rowFilter.chat.by_user"];
        };
        body: {
          /** chat */
          chat?: definitions["chat"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/note": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.note.id"];
          created_at?: parameters["rowFilter.note.created_at"];
          note_id?: parameters["rowFilter.note.note_id"];
          updated_at?: parameters["rowFilter.note.updated_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["note"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** note */
          note?: definitions["note"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.note.id"];
          created_at?: parameters["rowFilter.note.created_at"];
          note_id?: parameters["rowFilter.note.note_id"];
          updated_at?: parameters["rowFilter.note.updated_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.note.id"];
          created_at?: parameters["rowFilter.note.created_at"];
          note_id?: parameters["rowFilter.note.note_id"];
          updated_at?: parameters["rowFilter.note.updated_at"];
        };
        body: {
          /** note */
          note?: definitions["note"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/note_changes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.note_changes.id"];
          created_at?: parameters["rowFilter.note_changes.created_at"];
          delta?: parameters["rowFilter.note_changes.delta"];
          note_id?: parameters["rowFilter.note_changes.note_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["note_changes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** note_changes */
          note_changes?: definitions["note_changes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.note_changes.id"];
          created_at?: parameters["rowFilter.note_changes.created_at"];
          delta?: parameters["rowFilter.note_changes.delta"];
          note_id?: parameters["rowFilter.note_changes.note_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.note_changes.id"];
          created_at?: parameters["rowFilter.note_changes.created_at"];
          delta?: parameters["rowFilter.note_changes.delta"];
          note_id?: parameters["rowFilter.note_changes.note_id"];
        };
        body: {
          /** note_changes */
          note_changes?: definitions["note_changes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profile": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          name?: parameters["rowFilter.profile.name"];
          bio?: parameters["rowFilter.profile.bio"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profile"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          name?: parameters["rowFilter.profile.name"];
          bio?: parameters["rowFilter.profile.bio"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profile.id"];
          name?: parameters["rowFilter.profile.name"];
          bio?: parameters["rowFilter.profile.bio"];
        };
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          name?: parameters["rowFilter.room.name"];
          created_by?: parameters["rowFilter.room.created_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room */
          room?: definitions["room"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          name?: parameters["rowFilter.room.name"];
          created_by?: parameters["rowFilter.room.created_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          name?: parameters["rowFilter.room.name"];
          created_by?: parameters["rowFilter.room.created_by"];
        };
        body: {
          /** room */
          room?: definitions["room"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room_member": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_member.id"];
          user_id?: parameters["rowFilter.room_member.user_id"];
          created_at?: parameters["rowFilter.room_member.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room_member"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room_member */
          room_member?: definitions["room_member"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_member.id"];
          user_id?: parameters["rowFilter.room_member.user_id"];
          created_at?: parameters["rowFilter.room_member.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room_member.id"];
          user_id?: parameters["rowFilter.room_member.user_id"];
          created_at?: parameters["rowFilter.room_member.created_at"];
        };
        body: {
          /** room_member */
          room_member?: definitions["room_member"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/settings": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.settings.id"];
          is_public?: parameters["rowFilter.settings.is_public"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["settings"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** settings */
          settings?: definitions["settings"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.settings.id"];
          is_public?: parameters["rowFilter.settings.is_public"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.settings.id"];
          is_public?: parameters["rowFilter.settings.is_public"];
        };
        body: {
          /** settings */
          settings?: definitions["settings"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/join_room": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            room_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  chat: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    content: string;
    /** Format: text */
    by_guest?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    room_id?: string;
    /** Format: uuid */
    by_user?: string;
  };
  note: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: character varying */
    note_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updated_at: string;
  };
  note_changes: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: jsonb */
    delta: string;
    /**
     * Format: character varying
     * @description Note:
     * This is a Foreign Key to `note.note_id`.<fk table='note' column='note_id'/>
     */
    note_id: string;
  };
  profile: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    id: string;
    /**
     * Format: text
     * @default New User
     */
    name: string;
    /** Format: text */
    bio?: string;
  };
  room: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    name?: string;
    /** Format: uuid */
    created_by?: string;
  };
  room_member: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
  };
  settings: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: boolean */
    is_public: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description chat */
  "body.chat": definitions["chat"];
  /** Format: text */
  "rowFilter.chat.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.chat.created_at": string;
  /** Format: text */
  "rowFilter.chat.content": string;
  /** Format: text */
  "rowFilter.chat.by_guest": string;
  /** Format: uuid */
  "rowFilter.chat.room_id": string;
  /** Format: uuid */
  "rowFilter.chat.by_user": string;
  /** @description note */
  "body.note": definitions["note"];
  /** Format: bigint */
  "rowFilter.note.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.note.created_at": string;
  /** Format: character varying */
  "rowFilter.note.note_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.note.updated_at": string;
  /** @description note_changes */
  "body.note_changes": definitions["note_changes"];
  /** Format: uuid */
  "rowFilter.note_changes.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.note_changes.created_at": string;
  /** Format: jsonb */
  "rowFilter.note_changes.delta": string;
  /** Format: character varying */
  "rowFilter.note_changes.note_id": string;
  /** @description profile */
  "body.profile": definitions["profile"];
  /** Format: uuid */
  "rowFilter.profile.id": string;
  /** Format: text */
  "rowFilter.profile.name": string;
  /** Format: text */
  "rowFilter.profile.bio": string;
  /** @description room */
  "body.room": definitions["room"];
  /** Format: uuid */
  "rowFilter.room.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.created_at": string;
  /** Format: text */
  "rowFilter.room.name": string;
  /** Format: uuid */
  "rowFilter.room.created_by": string;
  /** @description room_member */
  "body.room_member": definitions["room_member"];
  /** Format: uuid */
  "rowFilter.room_member.id": string;
  /** Format: uuid */
  "rowFilter.room_member.user_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.room_member.created_at": string;
  /** @description settings */
  "body.settings": definitions["settings"];
  /** Format: uuid */
  "rowFilter.settings.id": string;
  /** Format: boolean */
  "rowFilter.settings.is_public": string;
}

export interface operations {}

export interface external {}
